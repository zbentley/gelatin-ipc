//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var message_ttypes = require('./message_types')
var rpc_ttypes = require('./rpc_types')


var ttypes = module.exports = {};
ttypes.RecoveryActionCode = {
  'RETRY_IMMEDIATE' : 1,
  'RETRY_WAIT' : 2,
  'RESTART' : 3,
  'RESET' : 4,
  'MANUAL_INTERVENTION' : 5
};
ttypes.PersistenceErrorCode = {
  'BUSY' : 1,
  'UNKNOWN' : 2
};
ttypes.ServiceErrorCode = {
  'STARTING' : 1,
  'STOPPING' : 2,
  'UNKNOWN' : 3,
  'EMPTY' : 4
};
PersistenceResult = module.exports.PersistenceResult = function(args) {
  this.ID = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PersistenceResult.prototype = {};
PersistenceResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PersistenceResult.prototype.write = function(output) {
  output.writeStructBegin('PersistenceResult');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceException = module.exports.ServiceException = function(args) {
  Thrift.TException.call(this, "ServiceException")
  this.name = "ServiceException"
  this.duringOperation = null;
  this.errno = null;
  this.advise = null;
  this.why = null;
  this.waitMilliseconds = null;
  this.dataLoss = null;
  if (args) {
    if (args.duringOperation !== undefined && args.duringOperation !== null) {
      this.duringOperation = args.duringOperation;
    }
    if (args.errno !== undefined && args.errno !== null) {
      this.errno = args.errno;
    }
    if (args.advise !== undefined && args.advise !== null) {
      this.advise = args.advise;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
    if (args.waitMilliseconds !== undefined && args.waitMilliseconds !== null) {
      this.waitMilliseconds = args.waitMilliseconds;
    }
    if (args.dataLoss !== undefined && args.dataLoss !== null) {
      this.dataLoss = args.dataLoss;
    }
  }
};
Thrift.inherits(ServiceException, Thrift.TException);
ServiceException.prototype.name = 'ServiceException';
ServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.duringOperation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.errno = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.advise = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.waitMilliseconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.dataLoss = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceException.prototype.write = function(output) {
  output.writeStructBegin('ServiceException');
  if (this.duringOperation !== null && this.duringOperation !== undefined) {
    output.writeFieldBegin('duringOperation', Thrift.Type.STRING, 1);
    output.writeString(this.duringOperation);
    output.writeFieldEnd();
  }
  if (this.errno !== null && this.errno !== undefined) {
    output.writeFieldBegin('errno', Thrift.Type.I32, 2);
    output.writeI32(this.errno);
    output.writeFieldEnd();
  }
  if (this.advise !== null && this.advise !== undefined) {
    output.writeFieldBegin('advise', Thrift.Type.I32, 3);
    output.writeI32(this.advise);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 4);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  if (this.waitMilliseconds !== null && this.waitMilliseconds !== undefined) {
    output.writeFieldBegin('waitMilliseconds', Thrift.Type.I32, 5);
    output.writeI32(this.waitMilliseconds);
    output.writeFieldEnd();
  }
  if (this.dataLoss !== null && this.dataLoss !== undefined) {
    output.writeFieldBegin('dataLoss', Thrift.Type.BOOL, 6);
    output.writeBool(this.dataLoss);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PersistenceException = module.exports.PersistenceException = function(args) {
  Thrift.TException.call(this, "PersistenceException")
  this.name = "PersistenceException"
  this.errno = null;
  this.advise = null;
  this.why = null;
  this.waitMs = null;
  if (args) {
    if (args.errno !== undefined && args.errno !== null) {
      this.errno = args.errno;
    }
    if (args.advise !== undefined && args.advise !== null) {
      this.advise = args.advise;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
    if (args.waitMs !== undefined && args.waitMs !== null) {
      this.waitMs = args.waitMs;
    }
  }
};
Thrift.inherits(PersistenceException, Thrift.TException);
PersistenceException.prototype.name = 'PersistenceException';
PersistenceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errno = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.advise = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.waitMs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PersistenceException.prototype.write = function(output) {
  output.writeStructBegin('PersistenceException');
  if (this.errno !== null && this.errno !== undefined) {
    output.writeFieldBegin('errno', Thrift.Type.I32, 1);
    output.writeI32(this.errno);
    output.writeFieldEnd();
  }
  if (this.advise !== null && this.advise !== undefined) {
    output.writeFieldBegin('advise', Thrift.Type.I32, 2);
    output.writeI32(this.advise);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 3);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  if (this.waitMs !== null && this.waitMs !== undefined) {
    output.writeFieldBegin('waitMs', Thrift.Type.I32, 4);
    output.writeI32(this.waitMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceRunningException = module.exports.ServiceRunningException = function(args) {
  Thrift.TException.call(this, "ServiceRunningException")
  this.name = "ServiceRunningException"
};
Thrift.inherits(ServiceRunningException, Thrift.TException);
ServiceRunningException.prototype.name = 'ServiceRunningException';
ServiceRunningException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceRunningException.prototype.write = function(output) {
  output.writeStructBegin('ServiceRunningException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

