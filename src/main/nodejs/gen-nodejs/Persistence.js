//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var message_ttypes = require('./message_types')
var rpc_ttypes = require('./rpc_types')


var ttypes = require('./gelatin_types');
//HELPER FUNCTIONS AND STRUCTURES

Persistence_getConfig_args = function(args) {
};
Persistence_getConfig_args.prototype = {};
Persistence_getConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_getConfig_args.prototype.write = function(output) {
  output.writeStructBegin('Persistence_getConfig_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_getConfig_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
Persistence_getConfig_result.prototype = {};
Persistence_getConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.success = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.success[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_getConfig_result.prototype.write = function(output) {
  output.writeStructBegin('Persistence_getConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter8 in this.success)
    {
      if (this.success.hasOwnProperty(kiter8))
      {
        var viter9 = this.success[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_start_args = function(args) {
};
Persistence_start_args.prototype = {};
Persistence_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_start_args.prototype.write = function(output) {
  output.writeStructBegin('Persistence_start_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_start_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Persistence_start_result.prototype = {};
Persistence_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_start_result.prototype.write = function(output) {
  output.writeStructBegin('Persistence_start_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_stop_args = function(args) {
};
Persistence_stop_args.prototype = {};
Persistence_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_stop_args.prototype.write = function(output) {
  output.writeStructBegin('Persistence_stop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_stop_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Persistence_stop_result.prototype = {};
Persistence_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_stop_result.prototype.write = function(output) {
  output.writeStructBegin('Persistence_stop_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_persist_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new message_ttypes.Message(args.message);
    }
  }
};
Persistence_persist_args.prototype = {};
Persistence_persist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new message_ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_persist_args.prototype.write = function(output) {
  output.writeStructBegin('Persistence_persist_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_persist_result = function(args) {
  this.success = null;
  this.p = null;
  this.s = null;
  if (args instanceof ttypes.PersistenceException) {
    this.p = args;
    return;
  }
  if (args instanceof ttypes.ServiceException) {
    this.s = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersistenceResult(args.success);
    }
    if (args.p !== undefined && args.p !== null) {
      this.p = args.p;
    }
    if (args.s !== undefined && args.s !== null) {
      this.s = args.s;
    }
  }
};
Persistence_persist_result.prototype = {};
Persistence_persist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersistenceResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p = new ttypes.PersistenceException();
        this.p.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.s = new ttypes.ServiceException();
        this.s.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_persist_result.prototype.write = function(output) {
  output.writeStructBegin('Persistence_persist_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p !== null && this.p !== undefined) {
    output.writeFieldBegin('p', Thrift.Type.STRUCT, 1);
    this.p.write(output);
    output.writeFieldEnd();
  }
  if (this.s !== null && this.s !== undefined) {
    output.writeFieldBegin('s', Thrift.Type.STRUCT, 2);
    this.s.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_persistRPC_args = function(args) {
  this.message = null;
  this.durableReply = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new message_ttypes.Message(args.message);
    }
    if (args.durableReply !== undefined && args.durableReply !== null) {
      this.durableReply = args.durableReply;
    }
  }
};
Persistence_persistRPC_args.prototype = {};
Persistence_persistRPC_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new message_ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.durableReply = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_persistRPC_args.prototype.write = function(output) {
  output.writeStructBegin('Persistence_persistRPC_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.durableReply !== null && this.durableReply !== undefined) {
    output.writeFieldBegin('durableReply', Thrift.Type.BOOL, 2);
    output.writeBool(this.durableReply);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_persistRPC_result = function(args) {
  this.success = null;
  this.p = null;
  this.s = null;
  this.r = null;
  if (args instanceof ttypes.PersistenceException) {
    this.p = args;
    return;
  }
  if (args instanceof ttypes.ServiceException) {
    this.s = args;
    return;
  }
  if (args instanceof rpc_ttypes.RPCException) {
    this.r = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new rpc_ttypes.RPCResult(args.success);
    }
    if (args.p !== undefined && args.p !== null) {
      this.p = args.p;
    }
    if (args.s !== undefined && args.s !== null) {
      this.s = args.s;
    }
    if (args.r !== undefined && args.r !== null) {
      this.r = args.r;
    }
  }
};
Persistence_persistRPC_result.prototype = {};
Persistence_persistRPC_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new rpc_ttypes.RPCResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p = new ttypes.PersistenceException();
        this.p.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.s = new ttypes.ServiceException();
        this.s.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.r = new rpc_ttypes.RPCException();
        this.r.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_persistRPC_result.prototype.write = function(output) {
  output.writeStructBegin('Persistence_persistRPC_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p !== null && this.p !== undefined) {
    output.writeFieldBegin('p', Thrift.Type.STRUCT, 1);
    this.p.write(output);
    output.writeFieldEnd();
  }
  if (this.s !== null && this.s !== undefined) {
    output.writeFieldBegin('s', Thrift.Type.STRUCT, 2);
    this.s.write(output);
    output.writeFieldEnd();
  }
  if (this.r !== null && this.r !== undefined) {
    output.writeFieldBegin('r', Thrift.Type.STRUCT, 3);
    this.r.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_flushPendingRPC_args = function(args) {
  this.continueOnError = null;
  if (args) {
    if (args.continueOnError !== undefined && args.continueOnError !== null) {
      this.continueOnError = args.continueOnError;
    }
  }
};
Persistence_flushPendingRPC_args.prototype = {};
Persistence_flushPendingRPC_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.continueOnError = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_flushPendingRPC_args.prototype.write = function(output) {
  output.writeStructBegin('Persistence_flushPendingRPC_args');
  if (this.continueOnError !== null && this.continueOnError !== undefined) {
    output.writeFieldBegin('continueOnError', Thrift.Type.BOOL, 1);
    output.writeBool(this.continueOnError);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Persistence_flushPendingRPC_result = function(args) {
  this.success = null;
  this.s = null;
  this.r = null;
  this.e = null;
  if (args instanceof ttypes.ServiceException) {
    this.s = args;
    return;
  }
  if (args instanceof ttypes.ServiceRunningException) {
    this.r = args;
    return;
  }
  if (args instanceof rpc_ttypes.RPCException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new rpc_ttypes.RPCResult(args.success);
    }
    if (args.s !== undefined && args.s !== null) {
      this.s = args.s;
    }
    if (args.r !== undefined && args.r !== null) {
      this.r = args.r;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Persistence_flushPendingRPC_result.prototype = {};
Persistence_flushPendingRPC_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new rpc_ttypes.RPCResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.s = new ttypes.ServiceException();
        this.s.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.r = new ttypes.ServiceRunningException();
        this.r.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new rpc_ttypes.RPCException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Persistence_flushPendingRPC_result.prototype.write = function(output) {
  output.writeStructBegin('Persistence_flushPendingRPC_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.s !== null && this.s !== undefined) {
    output.writeFieldBegin('s', Thrift.Type.STRUCT, 1);
    this.s.write(output);
    output.writeFieldEnd();
  }
  if (this.r !== null && this.r !== undefined) {
    output.writeFieldBegin('r', Thrift.Type.STRUCT, 2);
    this.r.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 3);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PersistenceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PersistenceClient.prototype = {};
PersistenceClient.prototype.seqid = function() { return this._seqid; }
PersistenceClient.prototype.new_seqid = function() { return this._seqid += 1; }
PersistenceClient.prototype.getConfig = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getConfig();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getConfig();
  }
};

PersistenceClient.prototype.send_getConfig = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getConfig', Thrift.MessageType.CALL, this.seqid());
  var args = new Persistence_getConfig_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PersistenceClient.prototype.recv_getConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Persistence_getConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getConfig failed: unknown result');
};
PersistenceClient.prototype.start = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start();
  }
};

PersistenceClient.prototype.send_start = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid());
  var args = new Persistence_start_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PersistenceClient.prototype.recv_start = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Persistence_start_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start failed: unknown result');
};
PersistenceClient.prototype.stop = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stop();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stop();
  }
};

PersistenceClient.prototype.send_stop = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid());
  var args = new Persistence_stop_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PersistenceClient.prototype.recv_stop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Persistence_stop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('stop failed: unknown result');
};
PersistenceClient.prototype.persist = function(message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_persist(message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_persist(message);
  }
};

PersistenceClient.prototype.send_persist = function(message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('persist', Thrift.MessageType.CALL, this.seqid());
  var args = new Persistence_persist_args();
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PersistenceClient.prototype.recv_persist = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Persistence_persist_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p) {
    return callback(result.p);
  }
  if (null !== result.s) {
    return callback(result.s);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('persist failed: unknown result');
};
PersistenceClient.prototype.persistRPC = function(message, durableReply, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_persistRPC(message, durableReply);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_persistRPC(message, durableReply);
  }
};

PersistenceClient.prototype.send_persistRPC = function(message, durableReply) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('persistRPC', Thrift.MessageType.CALL, this.seqid());
  var args = new Persistence_persistRPC_args();
  args.message = message;
  args.durableReply = durableReply;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PersistenceClient.prototype.recv_persistRPC = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Persistence_persistRPC_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p) {
    return callback(result.p);
  }
  if (null !== result.s) {
    return callback(result.s);
  }
  if (null !== result.r) {
    return callback(result.r);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('persistRPC failed: unknown result');
};
PersistenceClient.prototype.flushPendingRPC = function(continueOnError, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_flushPendingRPC(continueOnError);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_flushPendingRPC(continueOnError);
  }
};

PersistenceClient.prototype.send_flushPendingRPC = function(continueOnError) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flushPendingRPC', Thrift.MessageType.CALL, this.seqid());
  var args = new Persistence_flushPendingRPC_args();
  args.continueOnError = continueOnError;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PersistenceClient.prototype.recv_flushPendingRPC = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Persistence_flushPendingRPC_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.s) {
    return callback(result.s);
  }
  if (null !== result.r) {
    return callback(result.r);
  }
  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('flushPendingRPC failed: unknown result');
};
PersistenceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
PersistenceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

PersistenceProcessor.prototype.process_getConfig = function(seqid, input, output) {
  var args = new Persistence_getConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getConfig.length === 0) {
    Q.fcall(this._handler.getConfig)
      .then(function(result) {
        var result = new Persistence_getConfig_result({success: result});
        output.writeMessageBegin("getConfig", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getConfig", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getConfig(function (err, result) {
      if (err == null) {
        var result = new Persistence_getConfig_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PersistenceProcessor.prototype.process_start = function(seqid, input, output) {
  var args = new Persistence_start_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start.length === 0) {
    Q.fcall(this._handler.start)
      .then(function(result) {
        var result = new Persistence_start_result({success: result});
        output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServiceException) {
          var result = new Persistence_start_result(err);
          output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.start(function (err, result) {
      if (err == null || err instanceof ttypes.ServiceException) {
        var result = new Persistence_start_result((err != null ? err : {success: result}));
        output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PersistenceProcessor.prototype.process_stop = function(seqid, input, output) {
  var args = new Persistence_stop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stop.length === 0) {
    Q.fcall(this._handler.stop)
      .then(function(result) {
        var result = new Persistence_stop_result({success: result});
        output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServiceException) {
          var result = new Persistence_stop_result(err);
          output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.stop(function (err, result) {
      if (err == null || err instanceof ttypes.ServiceException) {
        var result = new Persistence_stop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PersistenceProcessor.prototype.process_persist = function(seqid, input, output) {
  var args = new Persistence_persist_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.persist.length === 1) {
    Q.fcall(this._handler.persist, args.message)
      .then(function(result) {
        var result = new Persistence_persist_result({success: result});
        output.writeMessageBegin("persist", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.PersistenceException || err instanceof ttypes.ServiceException) {
          var result = new Persistence_persist_result(err);
          output.writeMessageBegin("persist", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("persist", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.persist(args.message, function (err, result) {
      if (err == null || err instanceof ttypes.PersistenceException || err instanceof ttypes.ServiceException) {
        var result = new Persistence_persist_result((err != null ? err : {success: result}));
        output.writeMessageBegin("persist", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("persist", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PersistenceProcessor.prototype.process_persistRPC = function(seqid, input, output) {
  var args = new Persistence_persistRPC_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.persistRPC.length === 2) {
    Q.fcall(this._handler.persistRPC, args.message, args.durableReply)
      .then(function(result) {
        var result = new Persistence_persistRPC_result({success: result});
        output.writeMessageBegin("persistRPC", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.PersistenceException || err instanceof ttypes.ServiceException || err instanceof rpc_ttypes.RPCException) {
          var result = new Persistence_persistRPC_result(err);
          output.writeMessageBegin("persistRPC", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("persistRPC", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.persistRPC(args.message, args.durableReply, function (err, result) {
      if (err == null || err instanceof ttypes.PersistenceException || err instanceof ttypes.ServiceException || err instanceof rpc_ttypes.RPCException) {
        var result = new Persistence_persistRPC_result((err != null ? err : {success: result}));
        output.writeMessageBegin("persistRPC", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("persistRPC", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PersistenceProcessor.prototype.process_flushPendingRPC = function(seqid, input, output) {
  var args = new Persistence_flushPendingRPC_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.flushPendingRPC.length === 1) {
    Q.fcall(this._handler.flushPendingRPC, args.continueOnError)
      .then(function(result) {
        var result = new Persistence_flushPendingRPC_result({success: result});
        output.writeMessageBegin("flushPendingRPC", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServiceException || err instanceof ttypes.ServiceRunningException || err instanceof rpc_ttypes.RPCException) {
          var result = new Persistence_flushPendingRPC_result(err);
          output.writeMessageBegin("flushPendingRPC", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("flushPendingRPC", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.flushPendingRPC(args.continueOnError, function (err, result) {
      if (err == null || err instanceof ttypes.ServiceException || err instanceof ttypes.ServiceRunningException || err instanceof rpc_ttypes.RPCException) {
        var result = new Persistence_flushPendingRPC_result((err != null ? err : {success: result}));
        output.writeMessageBegin("flushPendingRPC", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flushPendingRPC", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

