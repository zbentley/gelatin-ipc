//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var message_ttypes = require('./message_types')


var ttypes = module.exports = {};
ttypes.ResultCode = {
  'SUCCESS' : 1,
  'FAILURE' : 0,
  'UNKNOWN' : 3
};
RPCException = module.exports.RPCException = function(args) {
  Thrift.TException.call(this, "RPCException")
  this.name = "RPCException"
  this.errno = null;
  this.why = null;
  if (args) {
    if (args.errno !== undefined && args.errno !== null) {
      this.errno = args.errno;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(RPCException, Thrift.TException);
RPCException.prototype.name = 'RPCException';
RPCException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errno = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RPCException.prototype.write = function(output) {
  output.writeStructBegin('RPCException');
  if (this.errno !== null && this.errno !== undefined) {
    output.writeFieldBegin('errno', Thrift.Type.I32, 1);
    output.writeI32(this.errno);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 3);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RPCResult = module.exports.RPCResult = function(args) {
  this.ID = null;
  this.messageID = null;
  this.result = null;
  this.code = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ID is unset!');
    }
    if (args.messageID !== undefined && args.messageID !== null) {
      this.messageID = args.messageID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageID is unset!');
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
RPCResult.prototype = {};
RPCResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RPCResult.prototype.write = function(output) {
  output.writeStructBegin('RPCResult');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.messageID !== null && this.messageID !== undefined) {
    output.writeFieldBegin('messageID', Thrift.Type.STRING, 2);
    output.writeString(this.messageID);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 3);
    output.writeString(this.result);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 4);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

