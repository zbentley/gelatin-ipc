//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var message_ttypes = require('./message_types')
var rpc_ttypes = require('./rpc_types')


var Persistence = require('./Persistence')
var PersistenceClient = Persistence.Client
var PersistenceProcessor = Persistence.Processor
var ttypes = require('./gelatin_types');
//HELPER FUNCTIONS AND STRUCTURES

RPC_enqeueRPC_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new message_ttypes.Message(args.message);
    }
  }
};
RPC_enqeueRPC_args.prototype = {};
RPC_enqeueRPC_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new message_ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RPC_enqeueRPC_args.prototype.write = function(output) {
  output.writeStructBegin('RPC_enqeueRPC_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RPC_enqeueRPC_result = function(args) {
  this.success = null;
  this.p = null;
  if (args instanceof ttypes.PersistenceException) {
    this.p = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersistenceResult(args.success);
    }
    if (args.p !== undefined && args.p !== null) {
      this.p = args.p;
    }
  }
};
RPC_enqeueRPC_result.prototype = {};
RPC_enqeueRPC_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersistenceResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.p = new ttypes.PersistenceException();
        this.p.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RPC_enqeueRPC_result.prototype.write = function(output) {
  output.writeStructBegin('RPC_enqeueRPC_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.p !== null && this.p !== undefined) {
    output.writeFieldBegin('p', Thrift.Type.STRUCT, 1);
    this.p.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RPCClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(RPCClient, PersistenceClient);
RPCClient.prototype.seqid = function() { return this._seqid; }
RPCClient.prototype.new_seqid = function() { return this._seqid += 1; }
RPCClient.prototype.enqeueRPC = function(message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enqeueRPC(message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enqeueRPC(message);
  }
};

RPCClient.prototype.send_enqeueRPC = function(message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enqeueRPC', Thrift.MessageType.CALL, this.seqid());
  var args = new RPC_enqeueRPC_args();
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RPCClient.prototype.recv_enqeueRPC = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RPC_enqeueRPC_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.p) {
    return callback(result.p);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('enqeueRPC failed: unknown result');
};
RPCProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(RPCProcessor, PersistenceProcessor)
RPCProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

RPCProcessor.prototype.process_enqeueRPC = function(seqid, input, output) {
  var args = new RPC_enqeueRPC_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enqeueRPC.length === 1) {
    Q.fcall(this._handler.enqeueRPC, args.message)
      .then(function(result) {
        var result = new RPC_enqeueRPC_result({success: result});
        output.writeMessageBegin("enqeueRPC", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.PersistenceException) {
          var result = new RPC_enqeueRPC_result(err);
          output.writeMessageBegin("enqeueRPC", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("enqeueRPC", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.enqeueRPC(args.message, function (err, result) {
      if (err == null || err instanceof ttypes.PersistenceException) {
        var result = new RPC_enqeueRPC_result((err != null ? err : {success: result}));
        output.writeMessageBegin("enqeueRPC", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enqeueRPC", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

